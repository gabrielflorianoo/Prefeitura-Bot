import pandas as pd
import pyautogui
import time
import os
import sys
from pathlib import Path
import keyboard
import threading

class PreenchedorAutomatico:
    def __init__(self):
        """Inicializa o preenchedor autom√°tico"""
        self.dados = None
        self.linha_atual = 0
        self.modo_automatico = True
        self.pausado = False
        self.tempo_espera = 0.3  # Tempo entre a√ß√µes
        self.arquivo_csv = None
        
        # Configura√ß√µes do pyautogui
        pyautogui.FAILSAFE = True  # Move mouse para canto superior esquerdo para parar
        pyautogui.PAUSE = 0.1  # Pausa pequena entre a√ß√µes
        
        print("ü§ñ Preenchedor Autom√°tico Iniciado!")
        print("‚ö†Ô∏è  ATEN√á√ÉO: Para parar de emerg√™ncia, mova o mouse para o canto superior esquerdo da tela")
    
    def listar_arquivos_csv(self):
        """Lista todos os arquivos CSV dispon√≠veis"""
        csvs = []
        
        # Procura na pasta atual
        for arquivo in os.listdir("."):
            if arquivo.endswith(".csv") and "extraidos" in arquivo.lower():
                csvs.append(arquivo)
        
        return csvs
    
    def selecionar_arquivo_csv(self):
        """Permite ao usu√°rio selecionar qual CSV usar"""
        csvs = self.listar_arquivos_csv()
        
        if not csvs:
            print("‚ùå Nenhum arquivo CSV de dados extra√≠dos encontrado!")
            print("üí° Certifique-se que existe um arquivo CSV com 'extraidos' no nome")
            return False
        
        print("üìã Arquivos CSV dispon√≠veis:")
        for i, csv in enumerate(csvs, 1):
            print(f"   {i}. {csv}")
        
        while True:
            try:
                escolha = input(f"\nEscolha um arquivo (1-{len(csvs)}): ")
                indice = int(escolha) - 1
                if 0 <= indice < len(csvs):
                    self.arquivo_csv = csvs[indice]
                    print(f"‚úÖ Arquivo selecionado: {self.arquivo_csv}")
                    return True
                else:
                    print("‚ùå N√∫mero inv√°lido!")
            except ValueError:
                print("‚ùå Digite apenas n√∫meros!")
    
    def carregar_dados_csv(self):
        """Carrega dados do arquivo CSV"""
        if not self.arquivo_csv:
            if not self.selecionar_arquivo_csv():
                return False
        
        try:
            self.dados = pd.read_csv(self.arquivo_csv, encoding='utf-8')
            print(f"‚úÖ Dados carregados: {len(self.dados)} linhas encontradas")
            
            # Mostra pr√©via dos dados
            print("\nüìã Pr√©via dos dados:")
            print(self.dados.head(2).to_string(index=False))
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao carregar CSV: {e}")
            return False
    
    def mostrar_configuracoes(self):
        """Mostra configura√ß√µes atuais"""
        print(f"\n‚öôÔ∏è  CONFIGURA√á√ïES ATUAIS:")
        print(f"   üìÅ Arquivo: {self.arquivo_csv}")
        print(f"   üìä Total de linhas: {len(self.dados) if self.dados is not None else 0}")
        print(f"   üèÉ Modo: {'Autom√°tico' if self.modo_automatico else 'Manual'}")
        print(f"   ‚è±Ô∏è  Tempo entre campos: {self.tempo_espera}s")
        print(f"   üìç Linha atual: {self.linha_atual + 1}")
    
    def configurar_opcoes(self):
        """Permite configurar op√ß√µes do preenchimento"""
        while True:
            print(f"\nüîß CONFIGURA√á√ïES")
            print("1. Alterar modo (Autom√°tico/Manual)")
            print("2. Alterar tempo de espera")
            print("3. Alterar linha inicial")
            print("4. Mostrar dados atuais")
            print("5. Continuar para preenchimento")
            
            opcao = input("\nEscolha uma op√ß√£o (1-5): ")
            
            if opcao == "1":
                self.modo_automatico = not self.modo_automatico
                print(f"‚úÖ Modo alterado para: {'Autom√°tico' if self.modo_automatico else 'Manual'}")
                
            elif opcao == "2":
                try:
                    novo_tempo = float(input("Digite o tempo de espera em segundos (0.1-5.0): "))
                    if 0.1 <= novo_tempo <= 5.0:
                        self.tempo_espera = novo_tempo
                        print(f"‚úÖ Tempo alterado para: {novo_tempo}s")
                    else:
                        print("‚ùå Tempo deve estar entre 0.1 e 5.0 segundos")
                except ValueError:
                    print("‚ùå Digite um n√∫mero v√°lido!")
                    
            elif opcao == "3":
                try:
                    nova_linha = int(input(f"Digite a linha inicial (1-{len(self.dados)}): "))
                    if 1 <= nova_linha <= len(self.dados):
                        self.linha_atual = nova_linha - 1
                        print(f"‚úÖ Linha inicial alterada para: {nova_linha}")
                    else:
                        print(f"‚ùå Linha deve estar entre 1 e {len(self.dados)}")
                except ValueError:
                    print("‚ùå Digite um n√∫mero v√°lido!")
                    
            elif opcao == "4":
                self.mostrar_configuracoes()
                
            elif opcao == "5":
                break
                
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
    
    def digitar_com_seguranca(self, texto):
        """Digita texto com verifica√ß√£o de seguran√ßa"""
        if texto is None or pd.isna(texto):
            texto = ""
        else:
            texto = str(texto).strip()
        
        # Limpa o campo atual primeiro (Ctrl+A + Delete)
        pyautogui.hotkey('ctrl', 'a')
        time.sleep(0.1)
        pyautogui.press('delete')
        time.sleep(0.1)
        
        # Digita o texto
        if texto:
            pyautogui.typewrite(texto, interval=0.05)
        
        time.sleep(self.tempo_espera)
    
    def preencher_linha(self, linha_dados):
        """Preenche uma linha de dados"""
        campos_ordem = [
            'numero_documento',
            'codigo_produto', 
            'quantidade',
            'valor_unitario',
            'valor_total',
            'placa',
            'km',
            'modelo_veiculo'
        ]
        
        print(f"\nüìù Preenchendo linha {self.linha_atual + 1}:")
        
        for i, campo in enumerate(campos_ordem):
            if campo in linha_dados:
                valor = linha_dados[campo]
                print(f"   {i+1}. {campo}: {valor}")
                
                # Digita o valor
                self.digitar_com_seguranca(valor)
                
                # Vai para o pr√≥ximo campo (Tab)
                if i < len(campos_ordem) - 1:  # N√£o d√° Tab no √∫ltimo campo
                    pyautogui.press('tab')
                    time.sleep(self.tempo_espera)
            else:
                print(f"   {i+1}. {campo}: CAMPO N√ÉO ENCONTRADO")
                # Mesmo assim d√° Tab para pular o campo
                if i < len(campos_ordem) - 1:
                    pyautogui.press('tab')
                    time.sleep(self.tempo_espera)
    
    def aguardar_confirmacao(self):
        """Aguarda confirma√ß√£o do usu√°rio para continuar"""
        if self.modo_automatico:
            print("‚è≥ Aguardando 3 segundos para pr√≥xima linha... (ESC para pausar)")
            for i in range(3):
                if keyboard.is_pressed('esc'):
                    self.pausado = True
                    print("\n‚è∏Ô∏è  PAUSADO! Pressione SPACE para continuar ou Q para sair")
                    while self.pausado:
                        if keyboard.is_pressed('space'):
                            self.pausado = False
                            print("‚ñ∂Ô∏è  Continuando...")
                            time.sleep(0.5)
                            break
                        elif keyboard.is_pressed('q'):
                            return False
                        time.sleep(0.1)
                time.sleep(1)
        else:
            input("\n‚è≥ Pressione Enter para ir para pr√≥xima linha (ou Ctrl+C para sair)...")
        
        return True
    
    def iniciar_preenchimento(self):
        """Inicia o processo de preenchimento"""
        if not self.carregar_dados_csv():
            return
        
        self.configurar_opcoes()
        self.mostrar_configuracoes()
        
        print(f"\nüöÄ INICIANDO PREENCHIMENTO!")
        print("="*50)
        print("‚ö†Ô∏è  IMPORTANTE:")
        print("   ‚Ä¢ Clique no primeiro campo do seu aplicativo")
        print("   ‚Ä¢ O script come√ßar√° em 5 segundos")
        print("   ‚Ä¢ ESC para pausar (modo autom√°tico)")
        print("   ‚Ä¢ Mouse no canto superior esquerdo para parar emerg√™ncia")
        print("="*50)
        
        # Countdown
        for i in range(5, 0, -1):
            print(f"üïê Iniciando em {i} segundos...")
            time.sleep(1)
        
        print("ü§ñ INICIADO! Preenchendo dados...")
        
        try:
            while self.linha_atual < len(self.dados):
                linha_dados = self.dados.iloc[self.linha_atual]
                
                # Preenche a linha atual
                self.preencher_linha(linha_dados)
                
                # Atualiza contador
                self.linha_atual += 1
                
                # Se n√£o √© a √∫ltima linha, aguarda confirma√ß√£o
                if self.linha_atual < len(self.dados):
                    if not self.aguardar_confirmacao():
                        break
                    
                    # Vai para pr√≥xima linha (Enter ou seta para baixo)
                    print("‚¨áÔ∏è  Indo para pr√≥xima linha...")
                    pyautogui.press('enter')  # ou 'down' dependendo do seu app
                    time.sleep(self.tempo_espera * 2)
            
            print(f"\nüéâ PREENCHIMENTO CONCLU√çDO!")
            print(f"üìä {self.linha_atual} linha(s) processada(s)")
            
        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è  Preenchimento interrompido pelo usu√°rio")
            print(f"üìç Parou na linha: {self.linha_atual + 1}")
        
        except Exception as e:
            print(f"\n‚ùå Erro durante preenchimento: {e}")
            print(f"üìç Parou na linha: {self.linha_atual + 1}")
    
    def mostrar_ajuda(self):
        """Mostra ajuda sobre como usar"""
        print("\nüìñ COMO USAR O PREENCHEDOR AUTOM√ÅTICO:")
        print("="*50)
        print("1Ô∏è‚É£  Abra seu aplicativo de trabalho")
        print("2Ô∏è‚É£  Posicione o cursor no PRIMEIRO CAMPO da primeira linha")
        print("3Ô∏è‚É£  Execute este script e siga as instru√ß√µes")
        print("4Ô∏è‚É£  O script ir√°:")
        print("   ‚Ä¢ Preencher cada campo")
        print("   ‚Ä¢ Pressionar TAB para pr√≥ximo campo") 
        print("   ‚Ä¢ Pressionar ENTER para pr√≥xima linha")
        print("\n‚öôÔ∏è  MODOS DISPON√çVEIS:")
        print("   ü§ñ Autom√°tico: Preenche tudo sozinho com pausas")
        print("   üë§ Manual: Espera voc√™ pressionar Enter entre linhas")
        print("\nüõë CONTROLES:")
        print("   ESC: Pausar (modo autom√°tico)")
        print("   SPACE: Continuar (quando pausado)")
        print("   Q: Sair (quando pausado)")
        print("   Mouse canto superior esquerdo: Parada de emerg√™ncia")
        print("="*50)

def main():
    print("ü§ñ PREENCHEDOR AUTOM√ÅTICO DE DADOS")
    print("="*50)
    
    preenchedor = PreenchedorAutomatico()
    
    while True:
        print(f"\nüìã MENU PRINCIPAL:")
        print("1. Iniciar preenchimento")
        print("2. Mostrar ajuda")
        print("3. Sair")
        
        opcao = input("\nEscolha uma op√ß√£o (1-3): ")
        
        if opcao == "1":
            preenchedor.iniciar_preenchimento()
            
        elif opcao == "2":
            preenchedor.mostrar_ajuda()
            
        elif opcao == "3":
            print("üëã Saindo...")
            break
            
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã Programa encerrado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        import traceback
        traceback.print_exc()
        input("\nPressione Enter para sair...")